{"type":"new","contents":"\nimport Lean\nimport Sketching.Sketch\n\nset_option sketchRecord true\n\nnamespace RegExp\nopen Lean Elab\n\ninductive Char where\n  | z\n  | o\nderiving Repr\n\nnotation \"c(0)\" => Char.z\nnotation \"c(1)\" => Char.o\n\nabbrev String := List Char\n\n\ninductive RegExp : Type where\n  | emp : RegExp\n  | eps : RegExp\n  | char : Char → RegExp\n  | star : RegExp → RegExp\n  | union : RegExp → RegExp → RegExp\n  | concat : RegExp → RegExp → RegExp\nderiving Nonempty, Inhabited, Repr\n\n\ninstance : Coe Char RegExp where\n  coe c := RegExp.char c\n\nnotation \"∅\" => RegExp.emp\nnotation \"ε\" => RegExp.eps\nnotation r1 \" <|> \" r2  => RegExp.union r1 r2\nnotation r1 \" <·> \" r2 => RegExp.concat r1 r2\nnotation r \"*\" => RegExp.star r\n\n\ninductive accepts : RegExp → String → Prop where\n  | eps : accepts ε []\n  | char (c : Char) : accepts c [c]\n  | unionLeft r1 r2 s : accepts r1 s → accepts (r1 <|> r2) s\n  | unionRight r1 r2 s : accepts r2 s → accepts (r1 <|> r2) s\n  | concat r1 r2 s1 s2:\n    accepts r1 s1 →\n    accepts r2 s2 →\n    accepts (r1 <·> r2) (s1 ++ s2)\n  | starEmpty r : accepts (r*) []\n  | starNonempty r s1 s2 :\n    accepts r s1 →\n    accepts (r*) s2 →\n    accepts (r*) (s1 ++ s2)\n\n\ndef exp_all := (c(0) <|> c(1))*\n\ndef Language := String → Prop\n\ndef empty : Language := λ s => False\ndef all : Language := λ s => True\n\ndef is_regular (l : Language) := ∃ r, ∀ s, l s ↔ accepts r s\n\ndef union_lang (l₁ l₂ : Language) := λ s => l₁ s ∨ l₂ s\n\ndef concat_lang (l₁ l₂ : Language) := λ s => ∃ s₁ s₂, s = s₁ ++ s₂ ∧ l₁ s₁ ∧ l₂ s₂\n\ndef reverse_lang (l : Language) := λ (s : String) => ∃ s', s.reverse = s' ∧ l s'\n\n\n-- PART 1 : Examples of Regular Expressions\ntheorem ex1 : accepts (c(0) <|> c(1)) [c(1)] := by\n  sorry\n\ntheorem ex2 : accepts (c(0) <·> c(1)) ([c(0)] ++ [c(1)]) := by\n  sorry\n\ntheorem ex3 : accepts (c(1)*) [] := by\n  sorry\n\ntheorem ex4 : accepts (c(1)*) ([c(1)] ++ ([c(1)] ++ [])) := by\n  sorry\n\n\n-- PART 2 : Warm up of `accepts`\ntheorem cons_app : forall (a : α) (l : List α), a :: l = [a] ++ l := by\n  sorry\n\ntheorem accepts_concat : ∀ r₁ r₂ s₁ s₂, accepts r₁ s₁ → accepts r₂ s₂ → accepts (r₁ <·> r₂) (s₁ ++ s₂) := by\n  sorry\n\ntheorem accepts_unionLeft : ∀ r₁ r₂ s, accepts r₁ s → accepts (r₁ <|> r₂) s := by\n  sorry\n\ntheorem accepts_star_empty : ∀ r, accepts (r*) [] := by\n  sorry\n\ntheorem accepts_char : ∀ (c : Char) s, accepts c s → s = [c] := by\n  sorry\n\ntheorem rejects_emp : ∀ s, ¬ accepts ∅ s := by\n  sorry\n\ntheorem accepts_not_emp : ∀ r, (∃ s, accepts r s) → r ≠ ∅ := by\n  sorry\n\ntheorem empty_regular : is_regular empty := by\n  sorry\n\ntheorem star_r : ∀ r s, accepts r s → accepts (r*) s := by\n  sorry\n\ntheorem union_comm : ∀ r₁ r₂ s, accepts (r₁ <|> r₂) s ↔ accepts (r₂ <|> r₁) s := by\n  sorry\n\n\n-- PART 3 : Regular Languages (through regular expressions)\ntheorem accepts_exp_all : ∀ s, accepts exp_all s := by\n  sorry\n\ntheorem all_regular : is_regular all := by\n  sorry\n\ntheorem union_regular : ∀ (l₁ l₂ : Language),\n  is_regular l₁ →\n  is_regular l₂ →\n  is_regular (union_lang l₁ l₂) := by\n  sorry\n\ntheorem concat_regular : ∀ (l₁ l₂ : Language),\n  is_regular l₁ →\n  is_regular l₂ →\n  is_regular (concat_lang l₁ l₂) := by\n  sorry\n\n\n-- PART 4 : Regularity of Reversal\ndef reverse : RegExp → RegExp\n  | .emp => ∅\n  | .eps => ε\n  | .char c => c\n  | .star r => (reverse r)*\n  | .union r₁ r₂ => (reverse r₁) <|> (reverse r₂)\n  | .concat r₁ r₂ => (reverse r₂) <·> (reverse r₁)\n\ndef reverse_inv : ∀ r, reverse (reverse r) = r := by\n  sorry\n\n-- PART 4 a : Inversion lemmas for reverse\ntheorem reverse_invert_emp : ∀ r, reverse r = ∅ → r = ∅ := by\n  sorry\n\ntheorem reverse_invert_eps : ∀ r, reverse r = ε → r = ε := by\n  sorry\n\ntheorem reverse_invert_char : ∀ r (c : Char), reverse r = c → r = c := by\n  sorry\n\ntheorem reverse_invert_union : ∀ (r r₁ r₂ : RegExp),\n  (reverse r = r₁ <|> r₂) → r = (reverse r₁) <|> (reverse r₂) := by\n  sorry\n\ntheorem reverse_invert_cat : ∀ (r r₁ r₂ : RegExp),\n  (reverse r = r₁ <·> r₂) → r = (reverse r₂) <·> (reverse r₁) := by\n  sorry\n\ntheorem reverse_invert_star : ∀ r r', reverse r = r'* → r = (reverse r')* := by\n  sorry\n\n\n-- PART 4 b : Proving reversal correct\ntheorem lazy_star : ∀ r s₁ s₂, accepts (r*) s₁ → accepts r s₂ → accepts (r*) (s₁ ++ s₂) := by\n  sorry\n\ntheorem reverse_correct_mp : ∀ r s, accepts r s → accepts (reverse r) (s.reverse) := by\n  sorry\n\ntheorem reverse_correct_mpr : ∀ r r' s s',\n  reverse r = r' →\n  s.reverse = s' →\n  accepts r' s' → accepts r s := by\n  sorry\n\ntheorem reverse_correct : ∀ r s, accepts r s ↔ accepts (reverse r) (s.reverse) := by\n  sorry\n\n\n-- PART 4 c : Proving reverse is regular\ntheorem reverse_regular : ∀ l, is_regular l → is_regular (reverse_lang l) := by\n  sorry\n\nend RegExp\n","mtime":1737068762232}